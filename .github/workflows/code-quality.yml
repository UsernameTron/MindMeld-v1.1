name: Code Quality

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/code-quality.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/code-quality.yml'
  workflow_dispatch:

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Linting and Type-Checking Tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-docstrings flake8-bugbear flake8-comprehensions flake8-quotes mypy black isort
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Check Formatting with Black
        run: black --check .

      - name: Check Import Order with isort
        run: isort --check-only --profile black .

      - name: Lint with flake8
        run: |
          # Critical checks that fail the build
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Comprehensive linting without failing
          flake8 . --count --exit-zero --config=.flake8 --statistics

      - name: Type Checking with mypy
        run: mypy --ignore-missing-imports --disallow-untyped-defs --disallow-incomplete-defs packages/agents

  test-agents-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        agent: [test_generator, dependency_agent, code_analyzer, code_debugger, code_repair, summarizer]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Pull Ollama Models
        run: |
          curl -fsSL https://ollama.ai/install.sh | sh
          ollama pull phi3.5:latest
          ollama pull codellama:latest

      - name: Test Agent: ${{ matrix.agent }}
        id: test-agent
        run: |
          mkdir -p test_outputs
          python run_agent.py ${{ matrix.agent }} "Test runner for ${{ matrix.agent }}" test_data/ \
            --output-dir=test_outputs \
            --model "phi3.5:latest" \
            --verbose

      - name: Validate Output Schema
        run: python validate_schema_ci.py --reports-dir=test_outputs

      - name: Upload Agent Output
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.agent }}-output
          path: test_outputs/${{ matrix.agent }}*.json

  docstring-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Docstring Coverage Tool
        run: |
          python -m pip install --upgrade pip
          pip install interrogate

      - name: Check Docstring Coverage
        run: |
          interrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex "__.*__" -f 75 packages/

  analyze-agent-reports:
    needs: [test-agents-matrix]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined_outputs

      - name: Analyze Agent Reports
        run: python -m scripts.analyze_agent_reports combined_outputs > combined_analysis.json

      - name: Upload Combined Analysis
        uses: actions/upload-artifact@v4
        with:
          name: agent-analysis
          path: combined_analysis.json