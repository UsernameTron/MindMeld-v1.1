name: Deploy

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    # Temporary workaround: use ubuntu-22.04 runner due to missing upload-artifact IAP on ubuntu-24.04 (May 2025)
    runs-on: ubuntu-22.04
    # Set environment based on branch
    environment:
      name: ${{ github.ref_name == 'main' && 'staging' || github.ref_name == 'production' && 'production' || 'review' }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Type Check
        run: npm run type-check
      - name: Test
        run: npm test
      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
      # --- Artifact upload workaround: use GitHub Releases as temporary storage (see actions-runner-workaround.md) ---
      - name: Generate unique release tag
        id: tag
        run: |
          echo "tag=deploy-artifact-${{ github.run_id }}-$(date +%s)" >> $GITHUB_OUTPUT

      - name: Package build output
        run: |
          zip -r deploy-artifact.zip .
        working-directory: ./dist

      - name: Upload build artifact as release asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/deploy-artifact.zip
          tag_name: ${{ steps.tag.outputs.tag }}
          draft: true
          prerelease: false
          fail_on_unmatched_files: true
          body: "Temporary artifact for workflow ${{ github.workflow }} (Run #${{ github.run_id }})"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # To download artifact in another job, use the GitHub API (see actions-runner-workaround.md)

      # Cleanup: delete the draft release after workflow completion
      - name: Cleanup temporary release
        if: always()
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" | \
            jq -r '.id')
          if [ "$RELEASE_ID" != "null" ]; then
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi
      # --- End workaround ---
      - name: Deploy to environment
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            echo "Deploying to staging environment"
            # Add staging deployment commands here
          elif [[ "$GITHUB_REF" == "refs/heads/production" ]]; then
            echo "Deploying to production environment"
            # Add production deployment commands here
          else
            echo "Deploying to review environment"
            # Add review deployment commands here
          fi
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
