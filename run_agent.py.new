#!/usr/bin/env python3
import json
import os
import sys
import time
import uuid
from pathlib import Path

import requests


def validate_input(agent_name, payload):
    """Validate input type based on agent requirements."""
    # Define agents that require file inputs
    file_only_agents = ["CodeDebuggerAgent", "CodeRepairAgent"]
    
    # Define agents that require numeric inputs
    numeric_agents = ["summarizer"]
    
    if not payload or (isinstance(payload, str) and payload.strip() == ""):
        return {
            "status": "error",
            "error": {
                "message": "Empty payload provided",
                "type": "ValidationError"
            },
            "metadata": {"agent": agent_name, "timestamp": int(time.time())}
        }
    
    if agent_name in file_only_agents:
        path = Path(payload)
        if not path.exists():
            return {
                "status": "error",
                "error": {
                    "message": f"File not found: {payload}",
                    "type": "ValidationError"
                },
                "metadata": {"agent": agent_name, "timestamp": int(time.time())}
            }
        if path.is_dir():
            return {
                "status": "error",
                "error": {
                    "message": f"Expected file path but received directory: {payload}",
                    "type": "ValidationError"
                },
                "metadata": {"agent": agent_name, "timestamp": int(time.time())}
            }
    
    if agent_name in numeric_agents:
        try:
            int(payload)
        except ValueError:
            return {
                "status": "error",
                "error": {
                    "message": f"Invalid input: expected integer, got {payload}",
                    "type": "TypeError"
                },
                "metadata": {"agent": agent_name, "timestamp": int(time.time())}
            }
    
    return None

def check_model_availability(model_name="phi3.5:latest"):
    """Check if required model is available."""
    try:
        # Try to connect to Ollama API
        ollama_url = os.environ.get("OLLAMA_HOST", "http://localhost:11434")
        response = requests.get(f"{ollama_url}/api/tags", timeout=5)
        
        # Check if model is in the list
        if response.status_code == 200:
            models = response.json().get("models", [])
            model_names = [m.get("name") for m in models]
            return model_name in model_names
        return False
    except Exception:
        return False

def get_system_info():
    """Get system information for metadata."""
    import platform

    import psutil
    
    return {
        "os": platform.system(),
        "python_version": platform.python_version(),
        "cpu_count": psutil.cpu_count(),
        "memory_gb": round(psutil.virtual_memory().total / (1024**3), 2)
    }

def get_model_info():
    """Get model information for metadata."""
    return {
        "name": os.getenv("OLLAMA_MODEL", "phi3.5:latest"),
        "config": {
            "temperature": float(os.getenv("TEMPERATURE", "0.7")),
            "max_tokens": int(os.getenv("MAX_TOKENS", "2048"))
        }
    }

def main():
    from schema_validator import normalize_agent_output, validate_agent_output
    
    if len(sys.argv) < 3:
        print("Usage: python run_agent.py <agent_name> <payload>")
        sys.exit(1)
    
    name = sys.argv[1]
    payload = sys.argv[2]
    timestamp = int(time.time())
    job_id = str(uuid.uuid4())
    
    print(f"Running agent {name} with payload {payload}")
    print(f"Job ID: {job_id}")
    
    # Create reports directory if it doesn't exist
    reports_dir = Path("reports") / name
    reports_dir.mkdir(parents=True, exist_ok=True)
    
    report_path = reports_dir / f"{name}_{timestamp}.json"
    
    # Validate input
    validation_error = validate_input(name, payload)
    if validation_error:
        # Write to output file and exit
        with open(report_path, "w") as f:
            json.dump(validation_error, f, indent=2)
        print(f"❌ Validation failed: {validation_error['error']['message']}")
        sys.exit(1)
    
    # Check model for LLM-dependent agents
    if name in ["TestGeneratorAgent", "ceo", "executor", "summarizer"]:
        model_name = os.environ.get("OLLAMA_MODEL", "phi3.5:latest")
        if not check_model_availability(model_name):
            result = {
                "status": "error",
                "error": {
                    "message": f"Required model not available: {model_name}",
                    "type": "ModelUnavailableError"
                },
                "metadata": {"agent": name, "timestamp": timestamp}
            }
            with open(report_path, "w") as f:
                json.dump(result, f, indent=2)
            print(f"❌ Model not available: {model_name}")
            sys.exit(1)
    
    # Get agent module
    try:
        if name.endswith("Agent"):
            # Import the specific agent class
            module_name = name
            if module_name.endswith("Agent"):
                module_name = module_name[:-5].lower()
            
            try:
                # Try standard import pattern
                module = __import__(f"agents.{module_name}", fromlist=[name])
                agent_class = getattr(module, name)
                agent = agent_class()
            except (ImportError, AttributeError):
                # Fallback to direct import
                try:
                    from agents import agent_factory
                    agent = agent_factory.get_agent(name)
                except ImportError:
                    # Last resort - try to get from main agents module
                    from agents import agents
                    agent = getattr(agents, name)()
        else:
            # Try to get function-based agent
            from agents import agent_factory
            agent = agent_factory.get_agent(name)
    except Exception as e:
        result = {
            "status": "error",
            "error": {
                "message": f"Failed to load agent {name}: {str(e)}",
                "type": "ImportError"
            },
            "timestamp": timestamp,
            "payload": payload,
            "metadata": {
                "agent": name,
                "job_id": job_id
            }
        }
        with open(report_path, "w") as f:
            json.dump(result, f, indent=2)
        print(f"❌ Failed to load agent: {e}")
        sys.exit(1)
    
    # Start timing execution
    start_time = time.time()
    
    # Get system and model info
    system_info = get_system_info()
    model_info = get_model_info()
    
    # Execute agent
    try:
        # Execute agent
        if hasattr(agent, 'analyze_deps') and name == "dependency_agent":
            verbose = "--verbose" in sys.argv
            result = agent.analyze_deps(payload, verbose)
        elif hasattr(agent, 'run'):
            try:
                result = agent.run(payload)
            except TypeError:
                result = agent.run()
        else:
            result = agent(payload) if callable(agent) else agent
        
        # Calculate runtime
        runtime_seconds = time.time() - start_time
        
        # Normalize and validate result
        if isinstance(result, (dict, list, str)):
            # Add metadata
            if isinstance(result, dict):
                metadata = result.get("metadata", {})
                metadata.update({
                    "agent": name,
                    "timestamp": timestamp,
                    "payload": payload[:200],  # Truncate if too long
                    "runtime_seconds": runtime_seconds,
                    "job_id": job_id,
                    "system_info": system_info,
                    "model_info": model_info
                })
                result["metadata"] = metadata
            
            # Normalize the result to match schema
            normalized_result = normalize_agent_output(result, name, payload, timestamp)
            
            # Validate against schema
            is_valid, validation_error = validate_agent_output(normalized_result)
            if not is_valid:
                print(f"⚠️ Warning: Schema validation failed: {validation_error}")
                # Add validation error but don't fail
                if "metadata" not in normalized_result:
                    normalized_result["metadata"] = {}
                normalized_result["metadata"]["validation_error"] = validation_error
            
            final_result = normalized_result
        else:
            # Handle non-serializable results
            final_result = {
                "agent": name,
                "status": "success",
                "data": {"result": str(result)},
                "timestamp": timestamp,
                "payload": payload[:200],
                "runtime_seconds": runtime_seconds,
                "metadata": {
                    "agent": name,
                    "timestamp": timestamp,
                    "payload": payload[:200],
                    "runtime_seconds": runtime_seconds,
                    "job_id": job_id,
                    "system_info": system_info,
                    "model_info": model_info
                }
            }
    except Exception as e:
        # Handle exceptions with proper error reporting
        runtime_seconds = time.time() - start_time
        final_result = {
            "agent": name,
            "status": "error",
            "error": {
                "message": str(e),
                "type": e.__class__.__name__
            },
            "timestamp": timestamp,
            "payload": payload[:200],
            "runtime_seconds": runtime_seconds,
            "metadata": {
                "agent": name,
                "timestamp": timestamp,
                "payload": payload[:200],
                "runtime_seconds": runtime_seconds,
                "job_id": job_id,
                "system_info": system_info,
                "model_info": model_info
            }
        }
        print(f"❌ Agent execution failed: {e}")
    
    # Write the report file
    with open(report_path, "w") as f:
        json.dump(final_result, f, indent=2)
    
    print(f"✅ Agent execution complete, report saved to {report_path}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
